/// <reference path="type_definitions/qunit/qunit.d.ts"/>
/// <reference path="frontendframework/all.js.ts"/>

QUnit.test("version number export", function(assert) {
  assert.equal(FrontEndFramework.VERSION, '<%= FrontEndFramework::VERSION %>');
});

//
// These mainly test to make sure that gHndl and hooks are not overwritten
//

QUnit.test("global handle basics", function(assert) {
  assert.notStrictEqual((typeof gHndl), 'undefined');
  assert.equal(gHndl, window);
});

QUnit.test("hooks basics", function(assert) {
  assert.notStrictEqual((typeof hooks), 'undefined');
  assert.equal((<any>gHndl).hooks, hooks);
  assert.ok(hooks.pre instanceof Array);
  assert.ok(hooks.post instanceof Array);
});

//
// FrontEndFramework.MiniHtmlViewModel
//

QUnit.test("MiniHtmlViewModel basics", function(assert) {
  // Tests if MiniHtmlViewModel namespace is available
  assert.notStrictEqual(FrontEndFramework.MiniHtmlViewModel, 'undefined');
});

QUnit.test("MiniHtmlViewModel ViewModelProperty basics", function(assert) {
  assert.ok(FrontEndFramework.MiniHtmlViewModel.ViewModelProperty != null);
  assert.ok(
    (new FrontEndFramework.MiniHtmlViewModel.ViewModelProperty(
      FrontEndFramework.MiniHtmlViewModel.BindingMode.OneTime,
      'test'
    )) instanceof FrontEndFramework.MiniHtmlViewModel.ViewModelProperty
  );
});

QUnit.test("view sanity test", function(assert) {
  assert.ok(document.getElementById('fef') != null);
});
